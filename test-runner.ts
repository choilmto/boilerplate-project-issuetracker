/*
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *       DO NOT EDIT THIS FILE
 *       For FCC testing purposes!
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

import {
  assertionAnalyser as analyser,
  Assertions,
} from "./assertion-analyser";
import { EventEmitter as EventEmitterClass } from "events";
import * as MochaClass from "mocha";
var EventEmitter = require("events").EventEmitter;

var Mocha = require("mocha"),
  fs = require("fs"),
  path = require("path");

var mocha: MochaClass = new Mocha();
var testDir: string = "./dist/tests";

// Add each .js file to the mocha instance
fs.readdirSync(testDir)
  .filter(function (file: string): boolean {
    // Only keep the .js files
    return file.substr(-3) === ".js";
  })
  .forEach(function (file: string): void {
    mocha.addFile(path.join(testDir, file));
  });

export type Test = {
  title: string;
  context: string;
  state: "failed" | "passed";
  assertions: Assertions[] | "invalid assertion";
};

class TestsEventEmitter extends EventEmitterClass {
  constructor() {
    super();
  }

  report: Test[];

  run(): void | never {
    var tests: Test[] = [];
    var context: string = "";
    var separator: string = " -> ";
    // Run the tests.
    try {
      var runner: EventEmitterClass = mocha
        .ui("tdd")
        .run()
        .on("test end", function (test: MochaClass.Test): void {
          // remove comments
          var body: string = test.body.replace(/\/\/.*\n|\/\*.*\*\//g, "");
          // collapse spaces
          body = body.replace(/\s+/g, " ");
          var obj = {
            title: test.title,
            context: context.slice(0, -separator.length),
            state: test.state,
            // body: body,
            assertions: analyser(body),
          };
          tests.push(obj);
        })
        .on("end", function (): void {
          this.report = tests;
          this.emit("done", tests);
        })
        .on("suite", function (s: MochaClass.Suite): void {
          context += s.title + separator;
        })
        .on("suite end", function (s: MochaClass.Suite): void {
          context = context.slice(0, -(s.title.length + separator.length));
        });
    } catch (e) {
      throw e;
    }
  }
}

export var emitter: TestsEventEmitter = new TestsEventEmitter();

/*
 * Mocha.runner Events:
 * can be used to build a better custom report
 *
 *   - `start`  execution started
 *   - `end`  execution complete
 *   - `suite`  (suite) test suite execution started
 *   - `suite end`  (suite) all tests (and sub-suites) have finished
 *   - `test`  (test) test execution started
 *   - `test end`  (test) test completed
 *   - `hook`  (hook) hook execution started
 *   - `hook end`  (hook) hook complete
 *   - `pass`  (test) test passed
 *   - `fail`  (test, err) test failed
 *   - `pending`  (test) test pending
 */
